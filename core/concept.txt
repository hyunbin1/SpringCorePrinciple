# SOLID
    1. SRP: 단일 책임 원칙(Single responsibility principle)
    2. OPC: 개방-폐쇄 원칙(Open/closed principle)
    3. LSP: 리스코프 치환 원칙(Liskov substitution principle)
    4. ISP: 인터페이스 분리 원칙(Interface segregation principle)
    5. DIP: 의존관계 역전 원칙(Dependency inversion principle)


# DI(의존관계 주입):
   각각의 객체에는 주로 interface(추상화)와 implement(구현체)가 있다.
   SOLID 중 DIP를 지키기 위하여 주로 DI를 사용한다.
   이는 각각의 구현체가 서로 다른 역할을 하는 구현체를 알지 못하고 추상화된 객체를 가져와서 사용해도
   AppConfig에서 추상화된 객체에 알맞게 구현체를 생성해(끼워넣어)줘서 각각의 구현해야되는 객체가 다른 객체(로직)으로
   변경되더라도 AppConfig에서만 바꿔주면 된다. -
   이를 Implement(구현체)의 입장에서 보면 의존관계를 마치 외부에서 주입해주는 것 같다고 해서 DI(의존관계 주입)이라고 한다.
   구현체는 실제 다른 구현체의 내용을 알지 못하는데, AppConfig가 알아서 턱 가져다 주기 때문이다.


# IoC: 제어의 역전(=Inversion of Control)
   - 일반적으로 개발자는 프로그램을 짤 때, 필요에 따라서 다양한 객체를 생성하고, 연결하고, 실행했다.
     다시 말하면, 프로그램의 제어 흐름을 개발자가 스스로 모든 것을 만들고, 제어하고, 조종했다는 것이다.
     하지만 이제는 프레임워크 등을 통해 개발자가 스스로 다 만들지 않아도 알아서 나의 코드들을 대신 호출해준다.
     이는 말그대로 개발자보다는 프레임워크 등이 제어권을 가지고 있기 때문에, 이를 제어의 역전이라고 말한다.

   - 예를 들어, 우리가 처음 짯던 AppConfig가 없던 코드들을 생각해보면,
     클라이언트 구현 객체들은 스스로 여러 서버 구현 객체들을 생성, 연결, 실행을 했다.
     하지만, AppConfig가 등장한 후에는 구현 객체는 자신의 로직을 실행하는 역할만을 담당하게 된다.

     => 그렇다면, 프로그램의 제어의 흐름은 구현 객체들이 아닌 AppConfig가 가져가게 되는 것이다.
        이처럼, 프로그램의 제어 흐름을 직접 재어하는 것이 아니라 외부에서 프로그램을 관리하는 것을 제어의 역전(IoC)라고 한다

     ex] OrderServiceImpl은 필요한 인터페이스를 호출하지만, 이에 해당하는 구현 객체의 내용을 알지도 못할 뿐더러,
         어떤 구현 객체들이 실행이 될지도 모른다. 심지어 OrderServiceImpl 객체도 AppConfig가 생성을 한다.


# 프레임워크 vs 라이브러리:
    프레임워크: 내가 작성한 코드를 제어하고, 대신 실행해주면 그것은 프레임워크이다. (JUnit)
    라이브러리: 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 라이브러리이다.


# IoC 컨테이너, DI 컨테이너:
    - AppConfig처럼 객체를 생성하고 관리하면서 의존 관계를 연결해주는 것을 IoC 컨테이너 혹은 DI 컨테이너라고 한다.
    - 요즘에는 IoC보다는 의존관계 주입에 초점을 맞추어 주로 DI 컨테이너라고 한다.
    - 이는 어샘블리, 오브젝트 팩토리 등으로 불리기도 한다.

# 동적인 객체 인스턴스 의존 관계:
    애플리케이션의 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계이다.
    - 애플리케이션의 실제 런타임 시점에 외부(AppConfig)에서 실제 구현 객체를 생성하고 클라이언트와 서버의 실제
      의존관계가 연결되는 것을 "의존관계 주입"이라고 한다.
    - 의존관계는 객체 인스턴스를 생성하고, 그 참조갑을 전달해서 연결된다.
    - 의존관계 주입을 사용하면, 정적인 클래스 의존관계(구현체)를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.
      cf) 동적인 객체 인스턴스: DiscountPolicy에서 FixDiscount 혹은 RateDiscount 두개를 수시로 바꿔서 사용할 수 있는 것처럼
                            이 두 객체를 동적인 객체 인스턴스라고 한다.

# AppConfig에 있는 Spring - Configuration, Bean = 스프링 컨테이너에 대한 설명이다.
    - ApplicationContext를 '스프링 컨테이너' 라고 한다.
    - ApplicationContext는 인터페이스로, 이 파일에 들어가면 여러 객체들이 있음을 알 수 있다.
    - 스프링 컨데이너는 xml 기반으로도 만들 수 있지마느 이제는 주석방식인 Annotation 기반의 자바 설정 클래스로 많이 만든다.
        cf) @bean 등이 주석 방식이다 -
    - 스프링 컨테이너는 이 안에 객체들을 담고 있는 것이다.
    Cf) 스프링 컨테이너는 원래 최상에 BeanFactory고, 그 아래 ApplicationContext가 있는데,
        BeanFactory를 직접 사용하는 경우는 거의 없어서 ApplicationContext를 스프링 컨테이너라고 한다.

        스프링 컨테이너를 생성할 때는 구성 정보를 지정해 주어야 한다.
        이를 통해 스프링 컨테이너는 구성 정보를 보고, 객체 생성 유무를 인지한다.
        우리는 AppConfig에 @Configure을 달아서 구성정보의 위치를 알려주고 구성정보를 기입해 주었다.

    - 스프링 컨테이너 안에 스프링 BEAN 저장소가 있다.
      이 저장소에는 빈 이름: 빈 객체로 구성되어 있다. == 빈 이름을 찾은 다음, 그 안에 있는 빈 객체를 실행하는 것!
      주의: 빈의 이름은 무조건 다른 이름으로 만들어야된다. 중복되게 만들면 절대 안된다. - 실무에서는 명확하고 정확하게 개발해야된다.


# For Each문(Java)
 ex]
    String[] number = {"one, "two", Three};
    for(String number : numbers){
        System.out.println(number);

 사용 방법:
    1. for문 안에서 numbers는 한개씩 순차적으로 number에 대입할 객체이다.
    2. for(괄호)에는 ':' 를 기준으로 왼쪽에는 새로운 객체를, 오른쪽에는 앞에 선언한 배열이나 ArrayList 등을 넣어주면 된다.


# beanDefinition 용어 정리:
    beanDefinition: 빈 하나하나에 대한 메타 데이터 정보이다.
    getBeanDefinition: 빈 하나 하나에 대하 메타 데이터 정보를 가져오는 것이다.
    beanDefinition.getRole(): 크게 3가지가 있는데 주로 BeanDefinition.ROLE_APPLICATION을 사용한다.
        스프링 내부 빈들이 아니라 내가 만든 애플리케이션을 등록하기 위한 빈들이다. 혹은 외부 라이브러리. - 이는 TEST 케이스에서 사용된다.


# 스프링 빈 조회 기본:
    스프링 컨테이너에서 스프링 빈을 찾는 가장 기본적인 조회 방법:
        ac.getBean(빈이름, 타입)
        ac.getBean(타입)
        주의! 조회 대상 스프링 비이 없으면 예외가 발생한다.
            오류! ex) NoSuchBeanDefinitionException: No bean named 'xxxx' av

# 스프링 빈 조회 - 동일한 타입이 둘 이상일때:
    타입으로 조회 시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다. 이때는 빈의 이름을 지정해 주어야한다.
    예를 들어 ac.getBeansOfType()을 사용하면 해당 타입의 모든 빈을 조회할 수 있다. -
    오류: NoUniqueBeanDefinitionException
    파일: ApplicationContextSameBeanFindTest 참조하기

# 🔔 중요! 스프링 빈 조회 - 상속 관계일때:
    스프링 빈이 상속 관계일때, 부모를 조회하면 자식 빈도 모두 함께 조회한다. == 대원칙! 이거는 꼭 기억하기.
    따라서 모든 자바 객체의 최고 부모인 'Object' 타입으로 조회하면, 모든 스프링 빈들이 조회된다.
    파일: ApplicationContextExtendsFindTest 참조하기



# BeanFactory와 ApplicationContext 개념 정리
    1. BeanFactory:
        앞서 말한바와 같이 BeanFactory는 스프링 컨테이너의 최상위 인터페이스이다.
        BeanFactory는 스프링 빈을 관리하고 조회하는 역할을 담당한다 - 따라서 getBean()을 제공한다
        지금까지 우리가 Test에서 사용한 빈 조회는 모두 BeanFactory가 제공한 기능을 사용한 것이다.

    2. Application:
        Application은 주로 스프링 컨테이너라고 불리는 것이다.
        이는 BeanFactory에 있는 기능을 상속을 받아서 제공한다.
        이는 애플리케이션을 개발할때 필요한 여러 가지 수 많은 부가기능이 필요할때 사용한다.

        아래는 application 인터페이스를 가져온 것이다.
       /*
       public interface ApplicationContext extends EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,
		MessageSource, ApplicationEventPublisher, ResourcePatternResolver {
       */

        1) 메세지 소스를 활용한 국제화 기능:
            예를 들어서 한국에서 사용자가 들어오면 한국어로 출력을 하고, 영어권에서 사용자가 들어오면 영어로 출력을 해준다

        2) 환경변수:
            개발할 때는 크게 3~4가지 개발환경이 있다.
            첫 번째로는 로컬 환경으로 개인 컴퓨터에서 로컬 호스트를 띄어 개발을 하는 방식이다.
            두 번째로는 실제 여러 시스템과 엮어서 test 서버와 함께 실행을 해보는 것이 개발환경
            세 번째로는 실제 서비스에 나가는 운영환경이 있다.
            마지막으로는 스테이징 환경으로, 운영과 가장 밀접한 환경을 만들어 개발하는 환경이 있다.
            => 이처럼 환경 변수에 관련된 정보를 구분해서 처리해주는 기능을 지원해준다.

        3) 애플리케이션 이벤트
            이벤트를 발행하고 구독하는 모델을 편리하게 지원해준다.

        4) 편리한 리소스 조회
            파일, 클래스패스, 외부 url 파일 등을 읽어 들여 내부에서 사용할 때 추상화하여 편리하게 사용할 수 있게 해준다.



# 스프링 컨테이너의 다양한 설정 형식 지원 - 자바 코드, XML
  스프링 컨테이너는 다양한 형식의 설정 정보를 받아드릴 수 있게 유연하게 설계되어 있다.
  자바 코드, XML, Groovy 등등 여러가지 가능하다.


# 스프링 빈 설정 메타 정보 - BeanDefinition
    스프핑이 xml, 자바 코드 등 다양한 설정 형식을 지원할 수 있는 이유는 BeanDefinition이라는 추상화때문이다.
    이는 역할과 구현을 개념적으로 매우 잘 구분하여 가능하다.
        - XML을 읽어서 BeanDefinition을 만들면 된다.
        - 자바 코드를 읽어서 BeanDefinition을 만들면 된다.
        - 스프링 컨테이너는 자바 코드인지, XML인지 상관없이 BeanDefinition만 알면된다.

    AppConfig 파일에서 우리는 각각의 인터페이스를 하나의 Bean으로 등록을 해주어 인터페이스와 구현체 상호 간의 구성 정보를 설정해 주었다.
    기존의 구현체들이 코드 실행의 역할을 다하기 위해 다른 구현체 간의 상호작용 역할은 하지 않고, 추상화된 객체로 설정해주었기 때문에,
    AppConfig에서 추상화된 객체(인터페이스) 간의 상호작용에 실제 구현체를 넣어 주는 역할을 한다.

    # BeanDefinition = 빈 설정 메타 정보
    Configuration을 구성하고 있는 파일 인 @Bean, <bean> 당 각각 하나씩 메타 정보가 생성된다.
    스프링 컨테이너는 이 메타 정보를 기반으로 스프링 빈을 생성한다.

    # BeanDefinition 정보
    1. BeanClassName: 생성할 빈의 클래스 명(자바 설청 처럼 팩토리 역할의 빈을 사용하면 없다)
    2. factoryBeanName: 팩토리 역할의 빈을 사용할 경우, 이름에 해당한다. ex) appConfig
    3. factoryMethodName: 빈을 생성할 팩토리 메서드를 지정한다. ex) memberService
    4. Scope: 싱글톤(기본값)
    5. lazyInit: 스프링 컨테이너를 생성할 때 빈을 생성하는 것이 아니라, 실제 빈을 사용할 때 까지 최대한 생성을 지연처리 하는지 여부를 판단
    6. DestroyMethodName: 빈의 생명주기가 끝나서 제거하기 직전에 호출되는 메서드 명
    7. Constructor arguments, Properties: 의존 관계 주입에서 사용한다.(자바 설정 처럼 팩토리 역할의 빈을 사용하면 없음)

!정리:
1. BeanDefinition을 직접 생성해서 스프링 컨테이너에 등록할 수도 있다.
   하지만 실무에서 BeanDefinition을 직접 정의하거나 사용할 일은 거의 없다. 따라서 넘 어려우면 넘어가기!
2. BeanDefinition에 대해서는 너무 깊게 이해하기 보다는, 스프링이 다양한 형태의 설정 정보를 BeanDefinition으로 추상화 해서 사용하는 것 정도로만 이해하면 된다.
3. 가끔 스프링 코드나 스프링 관련 오픈 소스의 코드를 볼 때, BeanDefinition이라는 것이 보일 때가 있다.
   이때 이러한 매커니즘을 떠올리면 된다.
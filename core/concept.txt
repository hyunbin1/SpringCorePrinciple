# SOLID
    1. SRP: 단일 책임 원칙(Single responsibility principle)
    2. OPC: 개방-폐쇄 원칙(Open/closed principle)
    3. LSP: 리스코프 치환 원칙(Liskov substitution principle)
    4. ISP: 인터페이스 분리 원칙(Interface segregation principle)
    5. DIP: 의존관계 역전 원칙(Dependency inversion principle)


# DI(의존관계 주입):
   각각의 객체에는 주로 interface(추상화)와 implement(구현체)가 있다.
   SOLID 중 DIP를 지키기 위하여 주로 DI를 사용한다.
   이는 각각의 구현체가 서로 다른 역할을 하는 구현체를 알지 못하고 추상화된 객체를 가져와서 사용해도
   AppConfig에서 추상화된 객체에 알맞게 구현체를 생성해(끼워넣어)줘서 각각의 구현해야되는 객체가 다른 객체(로직)으로
   변경되더라도 AppConfig에서만 바꿔주면 된다. -
   이를 Implement(구현체)의 입장에서 보면 의존관계를 마치 외부에서 주입해주는 것 같다고 해서 DI(의존관계 주입)이라고 한다.
   구현체는 실제 다른 구현체의 내용을 알지 못하는데, AppConfig가 알아서 턱 가져다 주기 때문이다.


# IoC: 제어의 역전(=Inversion of Control)
   - 일반적으로 개발자는 프로그램을 짤 때, 필요에 따라서 다양한 객체를 생성하고, 연결하고, 실행했다.
     다시 말하면, 프로그램의 제어 흐름을 개발자가 스스로 모든 것을 만들고, 제어하고, 조종했다는 것이다.
     하지만 이제는 프레임워크 등을 통해 개발자가 스스로 다 만들지 않아도 알아서 나의 코드들을 대신 호출해준다.
     이는 말그대로 개발자보다는 프레임워크 등이 제어권을 가지고 있기 때문에, 이를 제어의 역전이라고 말한다.

   - 예를 들어, 우리가 처음 짯던 AppConfig가 없던 코드들을 생각해보면,
     클라이언트 구현 객체들은 스스로 여러 서버 구현 객체들을 생성, 연결, 실행을 했다.
     하지만, AppConfig가 등장한 후에는 구현 객체는 자신의 로직을 실행하는 역할만을 담당하게 된다.

     => 그렇다면, 프로그램의 제어의 흐름은 구현 객체들이 아닌 AppConfig가 가져가게 되는 것이다.
        이처럼, 프로그램의 제어 흐름을 직접 재어하는 것이 아니라 외부에서 프로그램을 관리하는 것을 제어의 역전(IoC)라고 한다

     ex] OrderServiceImpl은 필요한 인터페이스를 호출하지만, 이에 해당하는 구현 객체의 내용을 알지도 못할 뿐더러,
         어떤 구현 객체들이 실행이 될지도 모른다. 심지어 OrderServiceImpl 객체도 AppConfig가 생성을 한다.


# 프레임워크 vs 라이브러리:
    프레임워크: 내가 작성한 코드를 제어하고, 대신 실행해주면 그것은 프레임워크이다. (JUnit)
    라이브러리: 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 라이브러리이다.


# IoC 컨테이너, DI 컨테이너:
    - AppConfig처럼 객체를 생성하고 관리하면서 의존 관계를 연결해주는 것을 IoC 컨테이너 혹은 DI 컨테이너라고 한다.
    - 요즘에는 IoC보다는 의존관계 주입에 초점을 맞추어 주로 DI 컨테이너라고 한다.
    - 이는 어샘블리, 오브젝트 팩토리 등으로 불리기도 한다.

# 동적인 객체 인스턴스 의존 관계:
    애플리케이션의 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계이다.
    - 애플리케이션의 실제 런타임 시점에 외부(AppConfig)에서 실제 구현 객체를 생성하고 클라이언트와 서버의 실제
      의존관계가 연결되는 것을 "의존관계 주입"이라고 한다.
    - 의존관계는 객체 인스턴스를 생성하고, 그 참조갑을 전달해서 연결된다.
    - 의존관계 주입을 사용하면, 정적인 클래스 의존관계(구현체)를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.
      cf) 동적인 객체 인스턴스: DiscountPolicy에서 FixDiscount 혹은 RateDiscount 두개를 수시로 바꿔서 사용할 수 있는 것처럼
                            이 두 객체를 동적인 객체 인스턴스라고 한다.

# AppConfig에 있는 Spring - Configuration, Bean